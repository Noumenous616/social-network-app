{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusHooks.jsx","common/img/photo.jpeg","Components/Profile/ProfileInfo/Contacts.jsx","Components/Profile/ProfileInfo/ProfileDataForm.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","Contacts","contactTitle","contactValue","className","s","contact","ProfileDataFormReduxForm","reduxForm","form","redactor","onSubmit","handleSubmit","onClick","toGoEditMode","error","sy","formSummaryError","createField","Input","Textarea","Object","keys","profile","contacts","map","key","ProfileData","descriptionBlock","isOwner","src","photos","large","userPhoto","avatar","type","target","files","length","savePhoto","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","userPage","userSettings","initialValues","formData","saveProfile","then","banner","Preloader","Post","item","message","likeCount","maxLength10","maxLengthCreator","MyPosts","React","memo","console","log","postElements","posts","p","likesCount","postsBlock","ProfileReduxForm","values","addPost","newPostBody","Field","component","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authoraizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.c00c730e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPage\":\"ProfileInfo_userPage__1Ds-R\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1QVF2\",\"redactor\":\"ProfileInfo_redactor__L7map\",\"avatar\":\"ProfileInfo_avatar__2irJs\",\"contact\":\"ProfileInfo_contact__-Z8bW\",\"banner\":\"ProfileInfo_banner__-KSyU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__fQSIy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__38fA6\"};","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    /* let editMode = stateWithSetState[0];\r\n     let setEditMode = stateWithSetState[1];*/\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div> <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || '----'}</span></div>}\r\n            {editMode &&\r\n            <div><input onChange={onStatusChange} onBlur={deactivateEditMode} value={status} autoFocus={true}\r\n            /></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusHooks;","export default __webpack_public_path__ + \"static/media/photo.3972f5db.jpeg\";","import React from 'react'\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nexport const Contacts = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n","import React from 'react'\r\nimport {createField, Input, Textarea} from \"../../../common/controleForms/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport s from './ProfileInfo.module.css'\r\nimport sy from './../../../common/controleForms/FormsControls.module.css'\r\n\r\n\r\n\r\n\r\nlet ProfileDataForm = (props) => {\r\n    debugger;\r\n    return <form className={s.redactor} onSubmit={props.handleSubmit}>\r\n        <div><button onClick={props.toGoEditMode}>Save</button>\r\n            {props.error && <div className={sy.formSummaryError}>{props.error}</div>}</div>\r\n\r\n                <b>Fullname:</b> {createField('Full name', 'fullName', [], Input)}\r\n                <div>\r\n                    <b>Looking for a job: </b> {createField('', 'lookingForAJob', [], Input, 'checkbox')}\r\n                </div>\r\n                <div>\r\n                    <b>My Proffesional skills: </b> {createField('My Proffesional skills', 'lookingForAJobDescription', [], Textarea)}\r\n                </div>\r\n\r\n                <div>\r\n                    <b>About me: </b> {createField('About me', 'aboutMe', [], Textarea)}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts </b> : {Object.keys(props.profile.contacts).map(key => {\r\n                    return <div>\r\n                        <b>{key}:{createField(key, 'contacts.' + key, [], Input, )} </b>\r\n                    </div>\r\n                })}\r\n                </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'editProfile'}) (ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatusHooks from \"./ProfileStatusHooks\";\r\nimport userPhoto from '../../../common/img/photo.jpeg'\r\nimport {Contacts} from \"./Contacts\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n    const onSubmit = (formData) => {\r\n         props.saveProfile(formData).then(() => {\r\n             setEditMode(false)\r\n         })\r\n    }\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.userPage}>\r\n            <div >\r\n\r\n            </div>\r\n            <div className={s.userSettings}>\r\n                {editMode ? <ProfileDataForm profile={props.profile} initialValues={props.profile} onSubmit={onSubmit} /> :\r\n                    <ProfileData  toGoEditMode={() => {setEditMode(true)}}\r\n                                  profile={props.profile} isOwner={props.isOwner}\r\n                                  updateStatus={props.updateStatus}\r\n                                  status={props.status}\r\n                                  savePhoto={props.savePhoto}/>}\r\n            </div>\r\n            <div className={s.banner}>\r\n                <img src='https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg'/>\r\n            </div>\r\n\r\n        </div>)}\r\n\r\nlet ProfileData = (props) => {\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return <div className={s.descriptionBlock}>\r\n        { props.isOwner && <div><button onClick={props.toGoEditMode}>Edit</button></div>}\r\n        <div>\r\n            <img src={props.profile.photos.large || userPhoto} className={s.avatar}/>\r\n            {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n            <div>\r\n                <b>Fullname:</b> {props.profile.fullName}\r\n                <div>\r\n                    <b>Looking for a job: </b> {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n                </div>\r\n                <div>\r\n                    <b>My Proffesional skills: </b> {props.profile.lookingForAJobDescription}\r\n                </div>\r\n                <div>\r\n                    <b>About me: </b> {props.profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <ProfileStatusHooks updateStatus={props.updateStatus} status={props.status}/>\r\n                </div>\r\n                <div>\r\n                    <b>Contacts </b> : {Object.keys(props.profile.contacts).map(key => {\r\n                    return <Contacts  key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\nconst Post = (props) => {\r\n    return ( \r\n            <div className={s.item}>\r\n              <img src='https://vokrug-tv.ru/pic/person/2/b/f/4/2bf448098b7badf3b37e87c510da29bc.jpeg' />\r\n              {props.message}\r\n              <div>\r\n              <span>like</span> {props.likeCount}\r\n            </div>\r\n            </div>\r\n            \r\n            \r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/valodator\";\r\nimport {Textarea} from \"../../../common/controleForms/FormsControls\";\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    console.log('render yoy')\r\n    let postElements = props.posts\r\n        .map(p => <Post message={p.message} likeCount={p.likesCount}/>)\r\n\r\n    let addNewPost = (values) => {\r\n        props.addPost(values.newPostBody);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>my posts</h3>\r\n            <ProfileReduxForm onSubmit={addNewPost}/>\r\n            {postElements}\r\n        </div>\r\n    )\r\n})\r\n\r\nconst profileTextForm = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={Textarea} name=\"newPostBody\" placeholder=\"Enter your message\"\r\n                           validate={[required, maxLength10]}/>\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </form>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileReduxForm = reduxForm({form: \"ProfileAddPostForm\"})(profileTextForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\n\r\n\r\n/*\r\nconst MyPostsContainer = (props) => {\r\n\r\n    let state = props.store.getState();\r\n\r\n\r\n    let addPost = () => {\r\n        props.store.dispatch(addPostActionCreator());\r\n    }\r\n\r\n    let onPostChange = (text) => {\r\n        let action = onPostChangeActionCreator(text);\r\n        props.store.dispatch(action);\r\n    }\r\n\r\n    return (<MyPosts updateNewPostText={onPostChange}\r\n                     addPost={addPost}\r\n                     posts={state.profilePage.posts}\r\n                     newPostText={state.profilePage.newPostText}/>)\r\n\r\n}*/\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostBody) => {\r\n            dispatch(addPostActionCreator(newPostBody));\r\n        }\r\n    }\r\n\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} updateStatus={props.updateStatus} status={props.status}/>\r\n            <MyPostsContainer />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component{\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authoraizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authoraizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)\r\n(ProfileContainer);\r\n"],"sourceRoot":""}